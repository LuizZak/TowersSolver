import XCTest
import class Foundation.Bundle

class mainTests: XCTestCase {
    func testTowersSolver() throws {
        guard #available(macOS 10.13, *) else {
            return
        }

        let result = try runSolver(commands: [
            "towers",
            "9:3/4//1///3/5/5/3///2//2/4///3/2//2/4/1///5///3/4/3///2/,d3f1f2n7g2i6_8c3h8a7a5f1d",
        ])

        assertMultilineContains(result.standardOutput, """
            After solve:
            
                 3     4           1                 3     5     5     
              ╭─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────╮  
              │     │     │     │     │     │     │     │     │     │  
            3 │  6  │  2  │  7  │  9  │  3  │  8  │  4  │  1  │  5  │  
              │▅▅▅▅▅│▁▁▁▁▁│▆▆▆▆▆│█████│▂▂▂▂▂│▇▇▇▇▇│▃▃▃▃▃│▁▁▁▁▁│▄▄▄▄▄│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
            2 │  5  │  3  │  1  │  4  │  9  │  7  │  8  │  2  │  6  │  
              │▄▄▄▄▄│▂▂▂▂▂│▁▁▁▁▁│▃▃▃▃▃│█████│▆▆▆▆▆│▇▇▇▇▇│▁▁▁▁▁│▅▅▅▅▅│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
              │  2  │  8  │  4  │  7  │  5  │  9  │  3  │  6  │  1  │ 3
              │▁▁▁▁▁│▇▇▇▇▇│▃▃▃▃▃│▆▆▆▆▆│▄▄▄▄▄│█████│▂▂▂▂▂│▅▅▅▅▅│▁▁▁▁▁│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
            2 │  8  │  1  │  9  │  5  │  6  │  4  │  7  │  3  │  2  │ 4
              │▇▇▇▇▇│▁▁▁▁▁│█████│▄▄▄▄▄│▅▅▅▅▅│▃▃▃▃▃│▆▆▆▆▆│▂▂▂▂▂│▁▁▁▁▁│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
            4 │  4  │  7  │  6  │  1  │  8  │  2  │  9  │  5  │  3  │ 3
              │▃▃▃▃▃│▆▆▆▆▆│▅▅▅▅▅│▁▁▁▁▁│▇▇▇▇▇│▁▁▁▁▁│█████│▄▄▄▄▄│▂▂▂▂▂│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
            1 │  9  │  5  │  2  │  3  │  4  │  1  │  6  │  8  │  7  │  
              │█████│▄▄▄▄▄│▁▁▁▁▁│▂▂▂▂▂│▃▃▃▃▃│▁▁▁▁▁│▅▅▅▅▅│▇▇▇▇▇│▆▆▆▆▆│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
              │  7  │  9  │  3  │  6  │  2  │  5  │  1  │  4  │  8  │  
              │▆▆▆▆▆│█████│▂▂▂▂▂│▅▅▅▅▅│▁▁▁▁▁│▄▄▄▄▄│▁▁▁▁▁│▃▃▃▃▃│▇▇▇▇▇│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
              │  1  │  6  │  8  │  2  │  7  │  3  │  5  │  9  │  4  │ 2
              │▁▁▁▁▁│▅▅▅▅▅│▇▇▇▇▇│▁▁▁▁▁│▆▆▆▆▆│▂▂▂▂▂│▄▄▄▄▄│█████│▃▃▃▃▃│  
              ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤  
              │     │     │     │     │     │     │     │     │     │  
            5 │  3  │  4  │  5  │  8  │  1  │  6  │  2  │  7  │  9  │  
              │▂▂▂▂▂│▃▃▃▃▃│▄▄▄▄▄│▇▇▇▇▇│▁▁▁▁▁│▅▅▅▅▅│▁▁▁▁▁│▆▆▆▆▆│█████│  
              ╰─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────╯  
                 3                 2           2     4                 
            """)
        
        XCTAssertEqual(result.standardError, "")
        XCTAssertEqual(result.terminationStatus, 0)
    }

    func testNetSolver() throws {
        guard #available(macOS 10.13, *) else {
            return
        }

        let result = try runSolver(commands: [
            "net",
            """
            13x11w:25b15d9884739de82e6251678646a\
            a61c59d7d31bc218daa848244d3a2bb7cea4\
            c4e3bb778eb2616c977675d7d6761ee41de3\
            a698dae7d3a888497ccc581bba48b82b2e64\
            1b3448
            """,
        ])

        assertMultilineContains(result.standardOutput, """
            After solve:

            ╭───────┬───┬───┬───┬───┬───────┬───┬───┬───┬───┬───┬───┬───────┬───┬───┬───┬───┬───┬───┬───┬───┬───────╮
            │*      │*  │   │*  │   │*      │*  │   │*  │   │*  │   │*      │*  │   │*  │   │*  │   │*  │   │*      │
            ├───■   │   │   │   ├───┼───■   │   │   │   ├───┼───╯   │   ■   │   ■   │   ■   │   ├───┼───╯   │   ╭───┤
            │       │   │   │   │   │       │   │   │   │   │       │   │   │       │       │   │   │       │   │   │
            ├───────┼───┼───┼───┼───┼───────┼───┼───┼───┼───┼───────┼───┼───┼───────┼───────┼───┼───┼───────┼───┼───┤
            │*      │*  │   │*  │   │*      │*  │   │*  │   │*      │*  │   │*      │*      │*  │   │*      │*  │   │
            ├───┬───┼───┤   │   ■   │   ■───┼───┤   │   ╰───┼───■   │   │   │   ■───┼───╮   │   ├───┼───■   │   ╰───┤
            │   │   │   │   │       │       │   │   │       │       │   │   │       │   │   │   │   │       │       │
            ├───┼───┼───┼───┼───────┼───────┼───┼───┼───────┼───────┼───┼───┼───────┼───┼───┼───┼───┼───────┼───────┤
            │*  │   │*  │   │*      │*      │*  │   │*      │*      │*  │   │*      │*  │   │*  │   │*      │*      │
            │   ■   │   ╰───┼───────┼───────┼───╯   │   ■───┼───╮   │   │   │   ╭───┼───┴───┼───┴───┼───┬───┼───╮   │
            │       │       │       │       │       │       │   │   │   │   │   │   │       │       │   │   │   │   │
            ├───────┼───────┼───────┼───────┼───────┼───────┼───┼───┼───┼───┼───┼───┼───────┼───────┼───┼───┼───┼───┤
            │*      │*      │*      │*      │*      │*      │*  │   │*  │   │*  │   │*      │*      │*  │   │*  │   │
            │   ■───┼───┬───┼───╮   │   ■   │   ■   │   ■───┼───┤   │   │   │   │   │   ■   │   ■   │   ■   │   ■   │
            │       │   │   │   │   │   │   │   │   │       │   │   │   │   │   │   │   │   │   │   │       │       │
            ├───────┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───────┤
            │*      │*  │   │*  │   │*  │   │*  │   │*      │*  │   │*  │   │*  │   │*  │   │*  │   │*      │*      │
            │   ■   │   ■   │   ├───┼───╯   │   │   │   ■───┼───┤   │   ├───┼───┴───┼───╯   │   ├───┼───────┼───■   │
            │   │   │       │   │   │       │   │   │       │   │   │   │   │       │       │   │   │       │       │
            ├───┼───┼───────┼───┼───┼───────┼───┼───┼───────┼───┼───┼───┼───┼───────┼───────┼───┼───┼───────┼───────┤
            │*  │   │*      │*  │   │*      │*  │   │*      │*  │   │*  │   │*      │*      │*  │   │*      │*      │
            ├───╯   │   ■   │   ├───┼───╮   │   ├───┼───┬───┼───■───┼───┤   │   ■───┼───┬───┼───┴───┼───■   │   ╭───┤
            │       │   │   │   │   │   │   │   │   │   │   │       │   │   │       │   │   │       │       │   │   │
            ├───────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───┼───┼───────┼───┼───┼───────┼───────┼───┼───┤
            │*      │*  │   │*  │   │*  │   │*  │   │*  │   │*      │*  │   │*      │*  │   │*      │*      │*  │   │
            │   ■   │   ╰───┼───╯   │   ╰───┼───┤   │   ├───┼───╮   │   ├───┼───────┼───┴───┼───┬───┼───┬───┼───╯   │
            │   │   │       │       │       │   │   │   │   │   │   │   │   │       │       │   │   │   │   │       │
            ├───┼───┼───────┼───────┼───────┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───────┼───┼───┼───┼───┼───────┤
            │*  │   │*      │*      │*      │*  │   │*  │   │*  │   │*  │   │*      │*      │*  │   │*  │   │*      │
            │   ├───┼───╮   │   ■───┼───┬───┼───┤   │   ■   │   ■   │   ├───┼───┬───┼───╮   │   │   │   ╰───┼───╮   │
            │   │   │   │   │       │   │   │   │   │       │       │   │   │   │   │   │   │   │   │       │   │   │
            ├───┼───┼───┼───┼───────┼───┼───┼───┼───┼───────┼───────┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───┼───┤
            │*  │   │*  │   │*      │*  │   │*  │   │*      │*      │*  │   │*  │   │*  │   │*  │   │*      │*  │   │
            │   ■   │   ├───┼───────┼───┤   │   ├───┼───┬───┼───╮   │   │   │   ■   │   ■   │   ■   │   ■───┼───╯   │
            │       │   │   │       │   │   │   │   │   │   │   │   │   │   │       │       │       │       │       │
            ├───────┼───┼───┼───────┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───────┼───────┼───────┼───────┼───────┤
            │*      │*  │   │*      │*  │   │*  │   │*  │   │*  │   │*  │   │*      │*      │*      │*      │*      │
            ├───┬───┼───╯   │   ╭───┼───╯   │   │   │   ■   │   ■   │   ├───┼───┬───┼───────┼───■   │   ■───┼───┬───┤
            │   │   │       │   │   │       │   │   │       │       │   │   │   │   │       │       │       │   │   │
            ├───┼───┼───────┼───┼───┼───────┼───┼───┼───────┼───────┼───┼───┼───┼───┼───────┼───────┼───────┼───┼───┤
            │*  │   │*      │*  │   │*      │*  │   │*      │*      │*  │   │*  │   │*      │*      │*      │*  │   │
            │   ■   │   ■   │   ├───┼───■   │   ├───┼───╮   │   ■   │   ■   │   ├───┼───╮   │   ■   │   ■   │   ■   │
            │       │   │   │   │   │       │   │   │   │   │   │   │       │   │   │   │   │   │   │   │   │       │
            ╰───────┴───┴───┴───┴───┴───────┴───┴───┴───┴───┴───┴───┴───────┴───┴───┴───┴───┴───┴───┴───┴───┴───────╯
            """)
        
        XCTAssertEqual(result.standardError, "")
        XCTAssertEqual(result.terminationStatus, 0)
    }

    func testLoopySolver() throws {
        guard #available(macOS 10.13, *) else {
            return
        }

        let result = try runSolver(commands: [
            "loopy",
            "7x7t0:c33a32a3f1d2a2a3a3a2a1c13a3a123c22a",
        ])

        assertMultilineContains(result.standardOutput, """
            After solve:
            
            •═══•   •   •═══•   •═══•═══•
            ║   ║       ║ 3 ║ 3 ║     3 ║
            •   •   •═══•   •═══•   •═══•
            ║ 2 ║   ║ 3             ║    
            •   •   •═══•═══•═══•   •═══•
            ║   ║     1         ║       ║
            •   •═══•   •   •═══•   •═══•
            ║ 2     ║ 2     ║ 3     ║ 3  
            •═══•   •═══•   •═══•   •═══•
                ║ 2     ║ 1     ║       ║
            •   •═══•   •   •═══•   •   •
              1   3 ║   ║ 3 ║     1   2 ║
            •═══•═══•   •═══•   •═══•═══•
            ║ 3               2 ║ 2      
            •═══•═══•═══•═══•═══•   •   •
            """)
        
        XCTAssertEqual(result.standardError, "")
        XCTAssertEqual(result.terminationStatus, 0)
    }

    func testSignpostSolver() throws {
        guard #available(macOS 10.13, *) else {
            return
        }

        let result = try runSolver(commands: [
            "signpost",
            "5x5:1d17d3cffcdcgedgafacahhgaccb25a",
        ])

        assertMultilineContains(result.standardOutput, """
            After solve:

            ╭─────┬─────┬─────┬─────┬─────╮
            │ 1   │ 17  │ 3   │ 4   │ 10  │
            │   ↘ │   ↘ │   → │   ↙ │   ↙ │
            ├─────┼─────┼─────┼─────┼─────┤
            │ 7   │ 24  │ 5   │ 6   │ 8   │
            │   → │   ↘ │   → │   ← │   ↓ │
            ├─────┼─────┼─────┼─────┼─────┤
            │ 15  │ 14  │ 2   │ 18  │ 9   │
            │   ↘ │   ← │   ↑ │   ↙ │   ↑ │
            ├─────┼─────┼─────┼─────┼─────┤
            │ 12  │ 16  │ 13  │ 23  │ 22  │
            │   → │   ↑ │   ↖ │   ↖ │   ← │
            ├─────┼─────┼─────┼─────┼─────┤
            │ 11  │ 19  │ 20  │ 21  │ 25  │
            │   ↑ │   → │   → │   ↗ │   * │
            ╰─────┴─────┴─────┴─────┴─────╯
            """)
        
        XCTAssertEqual(result.standardError, "")
        XCTAssertEqual(result.terminationStatus, 0)
    }

    func testPatternSolver() throws {
        guard #available(macOS 10.13, *) else {
            return
        }

        let result = try runSolver(commands: [
            "pattern",
            "5x5:1/2/1.1/2.2/2.2/4/1.2/1/2/3",
        ])

        assertMultilineContains(result.standardOutput, """
            After solve:
            
                          1   2   2
                  1   2   1   2   2
                ╭───▗▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▖
              4 │   ▐███████████████▌
                ├───▐███▛▀▀▀▜███████▌
            1 2 │   ▐███▌   ▐███████▌
                ▗▄▄▄▞▀▀▀▘───▝▀▀▀▀▀▀▀▘
              1 ▐███▌   │   │   │   │
                ▝▀▀▀▘───┼───▗▄▄▄▄▄▄▄▖
              2 │   │   │   ▐███████▌
                ├───┼───▗▄▄▄▟███████▌
              3 │   │   ▐███████████▌
                ╰───┴───▝▀▀▀▀▀▀▀▀▀▀▀▘
            """)
        
        XCTAssertEqual(result.standardError, "")
        XCTAssertEqual(result.terminationStatus, 0)
    }
}

private func runSolver(commands: [String]) throws -> ProcessResult {
    let process = Process()
    process.executableURL = binaryPath
    process.arguments = commands

    return try runProcess(process)
}
